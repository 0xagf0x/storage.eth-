{"ast":null,"code":"import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { frequency } from '../../frequency.js';\nimport { oneof } from '../../oneof.js';\nimport { set } from '../../set.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\n\nfunction entriesOf(keyArb, valueArb, maxKeys) {\n  return convertToNext(set(tuple(keyArb, valueArb), {\n    maxLength: maxKeys,\n    compare: (t1, t2) => t1[0] === t2[0]\n  }));\n}\n\nfunction mapOf(ka, va, maxKeys) {\n  return convertFromNext(entriesOf(ka, va, maxKeys).map(arrayToMapMapper, arrayToMapUnmapper));\n}\n\nfunction dictOf(ka, va, maxKeys) {\n  return convertFromNext(entriesOf(ka, va, maxKeys).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\n\nfunction setOf(va, maxKeys) {\n  return convertFromNext(convertToNext(set(va, {\n    maxLength: maxKeys\n  })).map(arrayToSetMapper, arrayToSetUnmapper));\n}\n\nfunction prototypeLessOf(objectArb) {\n  return convertFromNext(convertToNext(objectArb).map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper));\n}\n\nfunction typedArray() {\n  return oneof(int8Array(), uint8Array(), uint8ClampedArray(), int16Array(), uint16Array(), int32Array(), uint32Array(), float32Array(), float64Array());\n}\n\nexport function anyArbitraryBuilder(constraints) {\n  const arbitrariesForBase = constraints.values;\n  const maxDepth = constraints.maxDepth;\n  const maxKeys = constraints.maxKeys;\n  const baseArb = oneof(...arbitrariesForBase);\n  return letrec(tie => ({\n    anything: oneof({\n      maxDepth\n    }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map(o => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []), ...(constraints.withTypedArray ? [typedArray()] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), {\n      maxNumElements: maxKeys\n    })] : [])),\n    keys: constraints.withObjectString ? frequency({\n      arbitrary: constraints.key,\n      weight: 10\n    }, {\n      arbitrary: tie('anything').map(o => stringify(o)),\n      weight: 1\n    }) : constraints.key,\n    arrayBase: oneof(...arbitrariesForBase.map(arb => array(arb, {\n      maxLength: maxKeys\n    }))),\n    array: oneof(tie('arrayBase'), array(tie('anything'), {\n      maxLength: maxKeys\n    })),\n    setBase: oneof(...arbitrariesForBase.map(arb => setOf(arb, maxKeys))),\n    set: oneof(tie('setBase'), setOf(tie('anything'), maxKeys)),\n    mapBase: oneof(...arbitrariesForBase.map(arb => mapOf(tie('keys'), arb, maxKeys))),\n    map: oneof(tie('mapBase'), oneof(mapOf(tie('keys'), tie('anything'), maxKeys), mapOf(tie('anything'), tie('anything'), maxKeys))),\n    objectBase: oneof(...arbitrariesForBase.map(arb => dictOf(tie('keys'), arb, maxKeys))),\n    object: oneof(tie('objectBase'), dictOf(tie('keys'), tie('anything'), maxKeys))\n  })).anything;\n}","map":{"version":3,"sources":["/Users/charlesbuckley/solidity/faucet/node_modules/fast-check/lib/esm/arbitrary/_internals/builders/AnyArbitraryBuilder.js"],"names":["stringify","array","frequency","oneof","set","tuple","bigInt","date","float32Array","float64Array","int16Array","int32Array","int8Array","uint16Array","uint32Array","uint8Array","uint8ClampedArray","sparseArray","keyValuePairsToObjectMapper","keyValuePairsToObjectUnmapper","convertFromNext","convertToNext","arrayToMapMapper","arrayToMapUnmapper","arrayToSetMapper","arrayToSetUnmapper","objectToPrototypeLessMapper","objectToPrototypeLessUnmapper","letrec","entriesOf","keyArb","valueArb","maxKeys","maxLength","compare","t1","t2","mapOf","ka","va","map","dictOf","setOf","prototypeLessOf","objectArb","typedArray","anyArbitraryBuilder","constraints","arbitrariesForBase","values","maxDepth","baseArb","tie","anything","withMap","withSet","withObjectString","o","withNullPrototype","withBigInt","withDate","withTypedArray","withSparseArray","maxNumElements","keys","arbitrary","key","weight","arrayBase","arb","setBase","mapBase","objectBase","object"],"mappings":"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","sourcesContent":["import { stringify } from '../../../utils/stringify.js';\nimport { array } from '../../array.js';\nimport { frequency } from '../../frequency.js';\nimport { oneof } from '../../oneof.js';\nimport { set } from '../../set.js';\nimport { tuple } from '../../tuple.js';\nimport { bigInt } from '../../bigInt.js';\nimport { date } from '../../date.js';\nimport { float32Array } from '../../float32Array.js';\nimport { float64Array } from '../../float64Array.js';\nimport { int16Array } from '../../int16Array.js';\nimport { int32Array } from '../../int32Array.js';\nimport { int8Array } from '../../int8Array.js';\nimport { uint16Array } from '../../uint16Array.js';\nimport { uint32Array } from '../../uint32Array.js';\nimport { uint8Array } from '../../uint8Array.js';\nimport { uint8ClampedArray } from '../../uint8ClampedArray.js';\nimport { sparseArray } from '../../sparseArray.js';\nimport { keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper } from '../mappers/KeyValuePairsToObject.js';\nimport { convertFromNext, convertToNext } from '../../../check/arbitrary/definition/Converters.js';\nimport { arrayToMapMapper, arrayToMapUnmapper } from '../mappers/ArrayToMap.js';\nimport { arrayToSetMapper, arrayToSetUnmapper } from '../mappers/ArrayToSet.js';\nimport { objectToPrototypeLessMapper, objectToPrototypeLessUnmapper } from '../mappers/ObjectToPrototypeLess.js';\nimport { letrec } from '../../letrec.js';\nfunction entriesOf(keyArb, valueArb, maxKeys) {\n    return convertToNext(set(tuple(keyArb, valueArb), { maxLength: maxKeys, compare: (t1, t2) => t1[0] === t2[0] }));\n}\nfunction mapOf(ka, va, maxKeys) {\n    return convertFromNext(entriesOf(ka, va, maxKeys).map(arrayToMapMapper, arrayToMapUnmapper));\n}\nfunction dictOf(ka, va, maxKeys) {\n    return convertFromNext(entriesOf(ka, va, maxKeys).map(keyValuePairsToObjectMapper, keyValuePairsToObjectUnmapper));\n}\nfunction setOf(va, maxKeys) {\n    return convertFromNext(convertToNext(set(va, { maxLength: maxKeys })).map(arrayToSetMapper, arrayToSetUnmapper));\n}\nfunction prototypeLessOf(objectArb) {\n    return convertFromNext(convertToNext(objectArb).map(objectToPrototypeLessMapper, objectToPrototypeLessUnmapper));\n}\nfunction typedArray() {\n    return oneof(int8Array(), uint8Array(), uint8ClampedArray(), int16Array(), uint16Array(), int32Array(), uint32Array(), float32Array(), float64Array());\n}\nexport function anyArbitraryBuilder(constraints) {\n    const arbitrariesForBase = constraints.values;\n    const maxDepth = constraints.maxDepth;\n    const maxKeys = constraints.maxKeys;\n    const baseArb = oneof(...arbitrariesForBase);\n    return letrec((tie) => ({\n        anything: oneof({ maxDepth }, baseArb, tie('array'), tie('object'), ...(constraints.withMap ? [tie('map')] : []), ...(constraints.withSet ? [tie('set')] : []), ...(constraints.withObjectString ? [tie('anything').map((o) => stringify(o))] : []), ...(constraints.withNullPrototype ? [prototypeLessOf(tie('object'))] : []), ...(constraints.withBigInt ? [bigInt()] : []), ...(constraints.withDate ? [date()] : []), ...(constraints.withTypedArray ? [typedArray()] : []), ...(constraints.withSparseArray ? [sparseArray(tie('anything'), { maxNumElements: maxKeys })] : [])),\n        keys: constraints.withObjectString\n            ? frequency({ arbitrary: constraints.key, weight: 10 }, { arbitrary: tie('anything').map((o) => stringify(o)), weight: 1 })\n            : constraints.key,\n        arrayBase: oneof(...arbitrariesForBase.map((arb) => array(arb, { maxLength: maxKeys }))),\n        array: oneof(tie('arrayBase'), array(tie('anything'), { maxLength: maxKeys })),\n        setBase: oneof(...arbitrariesForBase.map((arb) => setOf(arb, maxKeys))),\n        set: oneof(tie('setBase'), setOf(tie('anything'), maxKeys)),\n        mapBase: oneof(...arbitrariesForBase.map((arb) => mapOf(tie('keys'), arb, maxKeys))),\n        map: oneof(tie('mapBase'), oneof(mapOf(tie('keys'), tie('anything'), maxKeys), mapOf(tie('anything'), tie('anything'), maxKeys))),\n        objectBase: oneof(...arbitrariesForBase.map((arb) => dictOf(tie('keys'), arb, maxKeys))),\n        object: oneof(tie('objectBase'), dictOf(tie('keys'), tie('anything'), maxKeys)),\n    })).anything;\n}\n"]},"metadata":{},"sourceType":"module"}