{"ast":null,"code":"var _jsxFileName = \"/Users/charlesbuckley/solidity/faucet/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [web3API, setWeb3API] = useState({\n    provider: null,\n    web3: null\n  });\n  const [accounts, setAccount] = useState(null);\n  useEffect(() => {\n    const loadProvider = async () => {\n      // with metamask, we have access to window.ethereum & window.web3\n      // metamask injects a global API into the website \n      // this API allows websites to request users, accounts, read data to blockchain\n      // sign messages and transactions\n      //* console.log(window.web3);\n      //* console.log(window.ethereum);\n      // connect to provider\n      const provider = await detectEthereumProvider();\n\n      if (provider) {\n        console.log('provider installed successfully');\n        const chainID = await provider.request({\n          // legacy providers may only have ethereum.sendAsync\n          method: 'eth_chainId'\n        });\n      } else {\n        console.log('no provider found');\n      } // create new instance of web3\n\n\n      setWeb3API({\n        web3: new Web3(provider),\n        provider\n      });\n    };\n\n    loadProvider();\n  }, []);\n  console.log(web3API.web3);\n  useEffect(() => {\n    const getAccounts = async () => {\n      const accounts = await web3API.web3.eth.getAccounts(); // gets array of accounts \n\n      setAccount(accounts[0]);\n    };\n\n    if (web3API.web3) {\n      getAccounts(); // getAccounts() will only be initialized when you have web3API object\n    }\n  }, [web3API.web3]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"faucet-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"faucet\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Account: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", accounts ? accounts : 'not connected', \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"balance-view is-size-2 mb-4\",\n        children: [\"Current Balance: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 28\n        }, this), \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button mr-2\",\n        onClick: async () => {\n          const accounts = await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          });\n          console.log(accounts);\n        },\n        children: \"Enable Ethereum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-link is-light mr-2\",\n        children: \"Donate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button is-primary is-light\",\n        children: \"Withdraw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"v6O8XcGqALRApd1FCbsxQduZqZM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/charlesbuckley/solidity/faucet/src/App.js"],"names":["React","useEffect","useState","Web3","detectEthereumProvider","App","web3API","setWeb3API","provider","web3","accounts","setAccount","loadProvider","console","log","chainID","request","method","getAccounts","eth","window","ethereum"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC;AACrCM,IAAAA,QAAQ,EAAE,IAD2B;AAErCC,IAAAA,IAAI,EAAE;AAF+B,GAAD,CAAtC;AAKA,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBT,QAAQ,CAAC,IAAD,CAAvC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,YAAY,GAAG,YAAY;AAC/B;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA,YAAMJ,QAAQ,GAAG,MAAMJ,sBAAsB,EAA7C;;AACA,UAAII,QAAJ,EAAc;AACZK,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AAEA,cAAMC,OAAO,GAAG,MAAMP,QAAQ,CAACQ,OAAT,CAAiB;AAAE;AACvCC,UAAAA,MAAM,EAAE;AAD6B,SAAjB,CAAtB;AAGD,OAND,MAMO;AACLJ,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,OAnB8B,CAqB/B;;;AACAP,MAAAA,UAAU,CAAC;AACTE,QAAAA,IAAI,EAAE,IAAIN,IAAJ,CAASK,QAAT,CADG;AAETA,QAAAA;AAFS,OAAD,CAAV;AAID,KA1BD;;AA4BAI,IAAAA,YAAY;AACb,GA9BQ,EA8BN,EA9BM,CAAT;AAgCAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,OAAO,CAACG,IAApB;AAIAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,WAAW,GAAG,YAAY;AAC9B,YAAMR,QAAQ,GAAG,MAAMJ,OAAO,CAACG,IAAR,CAAaU,GAAb,CAAiBD,WAAjB,EAAvB,CAD8B,CAC0B;;AACxDP,MAAAA,UAAU,CAACD,QAAQ,CAAC,CAAD,CAAT,CAAV;AACD,KAHD;;AAKA,QAAIJ,OAAO,CAACG,IAAZ,EAAkB;AAChBS,MAAAA,WAAW,GADK,CACD;AAChB;AACF,GATQ,EASN,CAACZ,OAAO,CAACG,IAAT,CATM,CAAT;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,wBAAMC,QAAQ,GAAGA,QAAH,GAAc,eAA5B;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,qDACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADnB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAME;AAAQ,QAAA,SAAS,EAAC,aAAlB;AAAgC,QAAA,OAAO,EAAG,YAAY;AACpD,gBAAMA,QAAQ,GAAG,MAAMU,MAAM,CAACC,QAAP,CAAgBL,OAAhB,CAAwB;AAACC,YAAAA,MAAM,EAAE;AAAT,WAAxB,CAAvB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACD,SAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,eAUE;AAAQ,QAAA,SAAS,EAAC,8BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,eAWE;AAAQ,QAAA,SAAS,EAAC,4BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GA1EQL,G;;KAAAA,G;AA4ET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport Web3 from 'web3';\nimport detectEthereumProvider from '@metamask/detect-provider';\n\nfunction App() {\n\n  const [web3API, setWeb3API] = useState({\n    provider: null,\n    web3: null,\n  }) \n\n  const [accounts, setAccount] = useState(null)\n\n\n  useEffect(() => {\n    const loadProvider = async () => {\n      // with metamask, we have access to window.ethereum & window.web3\n      // metamask injects a global API into the website \n      // this API allows websites to request users, accounts, read data to blockchain\n      // sign messages and transactions\n\n      //* console.log(window.web3);\n      //* console.log(window.ethereum);\n      \n      // connect to provider\n      const provider = await detectEthereumProvider();\n      if (provider) {\n        console.log('provider installed successfully');\n\n        const chainID = await provider.request({ // legacy providers may only have ethereum.sendAsync\n          method: 'eth_chainId'\n        })\n      } else {\n        console.log('no provider found')\n      }\n\n      // create new instance of web3\n      setWeb3API({\n        web3: new Web3(provider),\n        provider\n      })\n    }\n\n    loadProvider();\n  }, [])\n\n  console.log(web3API.web3);\n\n\n\n  useEffect(() => {\n    const getAccounts = async () => {\n      const accounts = await web3API.web3.eth.getAccounts();  // gets array of accounts \n      setAccount(accounts[0])\n    }\n\n    if (web3API.web3) {\n      getAccounts()  // getAccounts() will only be initialized when you have web3API object\n    }\n  }, [web3API.web3])\n\n  return (\n    <div className=\"faucet-wrapper\">\n      <div className=\"faucet\">\n        <span>Account: </span>\n        <h1> {accounts ? accounts : 'not connected'} </h1>\n        <div className=\"balance-view is-size-2 mb-4\">\n          Current Balance: <strong>10</strong> ETH\n        </div>\n        <button className=\"button mr-2\" onClick={ async () => {\n          const accounts = await window.ethereum.request({method: \"eth_requestAccounts\"});\n          console.log(accounts)\n        }}>Enable Ethereum</button>\n        <button className=\"button is-link is-light mr-2\">Donate</button>\n        <button className=\"button is-primary is-light\">Withdraw</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}